=================================================================================
INTRODUCTION                              *nixCats.flake.nixperts.nvimBuilder*

Wait, why is this code? 
I could not find a better way to incorporate code examples without
just doing this and including more comments than code.

--------------------------------------------------------------------------
                                *nixCats.flake.nixperts.nvimBuilder.arguments*

  # this function takes a set with the following items:
  # our arguments ? and their default values
>nix
  helpPath: path: pkgs: 
  {
    , startupPlugins ? {}
    , optionalPlugins ? {}
    , lspsAndRuntimeDeps ? {}
    , propagatedBuildInputs ? {}
    , environmentVariables ? {}
    , extraWrapperArgs ? {}
<
    # these ones take sets of lists of FUNCTIONS,
    # and those functions return lists of packages.
    # i.e. (_:[]) as a default argument
    # so now you can put categories of lists of them in
    # and they will be sorted like everything else
    # Idk why they work that way, 
    # but just made a function to filter them, 
    # call them, then combine the outputs.
    # and I pass that in instead.
    # the source says:
      /* the function you would have passed to python.withPackages */
>nix
    , extraPythonPackages ? {}
    , extraPython3Packages ? {}
    # same thing except for lua.withPackages
    , extraLuaPackages ? {}
<
    # only for use when importing this flake in another flake 
    # and need to add a bit of lua for an added plugin.
    # Yes you can require nixCats in it. >nix
    , optionalLuaAdditions ? ""
    }: 
<
    # and our last 2 arguments:
>nix
    settings: categories:
    let
<
      # when packaging, one of these is passed as settings,
      # but we dont want to have to define all of them every time.
      # so we update the default config with whatever new options were passed
>nix
      config = {
        wrapRc = true;
        configDirName = "nvim";
        viAlias = false;
        vimAlias = false;
        withNodeJs = false;
        withRuby = true;
        extraName = "";
        withPython3 = true;
      } // settings;
<
--------------------------------------------------------------------------
                                   *nixCats.flake.nixperts.nvimBuilder.opener*

    # package entire flake into the store
    # see :help `'rtp'` for what folders can be defined
>nix
    LuaConfig = pkgs.stdenv.mkDerivation {
      name = builtins.baseNameOf path;
      builder = builtins.toFile "builder.sh" ''
        source $stdenv/setup
        mkdir -p $out
        cp -r ${path}/* $out/
      '';
    };
<
    # see :help `nixCats`
    # here is where nixCats is generated
    # it uses some recursive stuff in utils to print a lua table to a file.
    # That table is the categories we were including, plus wrapRc
    # Thats it. Also it defines a user command and includes the help.
>nix
    nixCats = pkgs.stdenv.mkDerivation {
      name = "nixCats";
      builder = let
        categoriesPlus = categories // { inherit (config) wrapRc; };
        cats = builtins.toFile "nixCats.lua" ''
            vim.api.nvim_create_user_command('NixCats', 
            [[lua print(vim.inspect(require('nixCats')))]] , 
            { desc = 'So Cute!' })
            return ${(import ./utils.nix).luaTablePrinter categoriesPlus}
          '';
      # It installs itself and these docs to wherever it installs to.
      in builtins.toFile "builder.sh" ''
        source $stdenv/setup
        mkdir -p $out/lua
        mkdir -p $out/doc
        cp ${cats} $out/lua/nixCats.lua
        cp -r ${helpPath}/* $out/doc
      '';
    };
<
    # and create our customRC to call it
    # This makes sure our config is loaded at the right time and our after is loaded last.
    # It requires the root level init.lua file. 
    # It also removes the regular config dir from the path.
    # The wrapper we are using might put it in the wrong place for our uses.
    # so we add in the config directory ourselves to prevent any issues.
    # even when wrapRc == false.
>nix
    configDir = if config.configDirName != null && config.configDirName != ""
      then config.configDirName else "nvim";
    customRC = ''
        let configdir = expand('~') . "/.config/${configDir}"
        execute "set runtimepath-=" . configdir
        execute "set runtimepath-=" . configdir . "/after"
      '' + (if config.wrapRc then ''
        let runtimepath_list = split(&runtimepath, ',')
        call insert(runtimepath_list, "${LuaConfig}", 0)
        let &runtimepath = join(runtimepath_list, ',')

        set runtimepath+=${LuaConfig}/after

        lua package.path = package.path .. ';${LuaConfig}/init.lua'
        lua require('${builtins.baseNameOf LuaConfig}')
      '' else ''
        let runtimepath_list = split(&runtimepath, ',')
        call insert(runtimepath_list, configdir, 0)
        let &runtimepath = join(runtimepath_list, ',')

        execute "set runtimepath+=" . configdir . "/after"

        lua package.path = package.path .. ';' .. vim.api.nvim_get_var('configdir') .. '/init.lua'
        lua require('${configDir}')
      '') + ''
        lua << EOF
        ${optionalLuaAdditions}
        EOF
      '';
<
      # optionalLuaAdditions is not the suggested way to add lua to this flake
      # It is only for use when importing this flake in another flake 
      # and need to add a bit of lua for 
      # an added plugin using a custom builder
      # you could in theory add a directory to the runtimepath 
      # with it though from another flake that imports this flake.
      # Yes you can require nixCats in it.
      # Again, not recommended.

---------------------------------------------------------------------------------
                             *nixCats.flake.nixperts.nvimBuilder.basicFlatmap*

    # This is what allows for dynamic packaging in flake.nix.
    # It includes categories marked as true, then flattens to a single list.
>nix
    filterAndFlatten = (import ./utils.nix)
          .filterAndFlattenAttrsOfLists pkgs categories;
<
    # We can use that function to filter many of the options.
    # anything that has an argument in the wrapper and 
    # is a list of categories of packages, you can filter this way
>nix
    buildInputs = [ pkgs.stdenv.cc.cc.lib ] ++ filterAndFlatten propagatedBuildInputs;
    start = [ nixCats ] ++ filterAndFlatten startupPlugins;
    opt = filterAndFlatten optionalPlugins;

    # I didnt add stdenv.cc.cc.lib, so I would suggest not removing it.
    # It has cmake in it among other things.
<
---------------------------------------------------------------------------------
                           *nixCats.flake.nixperts.nvimBuilder.mapWrapArgCats*

    # This one filters and flattens like above but for attrs of attrs 
    # and then maps name and value
    # into a list based on the function we provide it.
    # its like a flatmap function but with a built in filter for category.
    # you may use this to create entirely new 
    # categories in the builder for wrapper arguments
    # more info on wrapper arguments below.
>nix
    filterAndFlattenWrapAttrs = (import ./utils.nix)
          .FilterAttrsOfAttrsFlatMapInner pkgs categories;
<
    # This one filters and flattens attrs of lists and then maps value
    # into a list based on the function we provide it.
    # it the same as above but for a mapping function with 1 argument
    # because the inner thing we are mapping is a list not a set.
>nix
    filterAndFlattenWrapLists = (import ./utils.nix)
          .FilterAttrsOfListsFlatMapInner pkgs categories;
<
    # Each of these 2 functions actually take 4 arguments. But actually,
    # they are 4 separate functions inside one another.
    # therefore we can supply it with the first 2 arguments, then supply it
    # with a function to map, then later supply it with the final argument.
    # currently, it now works very much like a regular flatmap function.
    # it now takes a function, and a set of categories of stuff.


---------------------------------------------------------------------------------
                          *nixCats.flake.nixperts.nvimBuilder.usingWrapArgMap*

    # we are going to provide a function to map name and value
    # into a wrapper argument that sets an environment variable
>nix
    FandF_envVarSet = filterAndFlattenWrapAttrs 
          (name: value: ''--set ${name} "${value}"'');
<
    # and this one we define a function that just passes an arg through.
    # this one takes in a set of lists rather than a set of sets
>nix
    FandF_passWrapperArgs = filterAndFlattenWrapLists (value: value);
<

    # you can use filterAndFlattenWrapLists and its attr set counterpart in order
    # to create new sets of categories in the flake's builder function
    # that are to do with wrapper args.

    # you would add the set as an argument to this file, then, create one of these.
    # to create one, pass it a new wrapping function. I.E. 
    # FandFpassFlags = filterAndFlattenWrapLists (value: "--add-flags ${value}")

    # and this is how we add our lsps/runtime dependencies/whatever we need available at runtime
>nix
    FandF_WrapRuntimeDeps = filterAndFlattenWrapLists (value:
      ''--prefix PATH : "${pkgs.lib.makeBinPath [ value ] }"''
    );
<
    # this next part takes those wrapper args and 
    # concatenates them together with a space
    # More info at:
# https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/setup-hooks/make-wrapper.sh

    # we will send this to our rendition of the official wrapNeovim stable
    # which is just pkgs.wrapNeovim with an extra argument
>nix
    # We call the functions above and add them into a big list
    # which we then call concatStringsSep " " on
    extraMakeWrapperArgs = builtins.concatStringsSep " " (
      # this sets the name of the folder to look for nvim stuff in
      (if configDir != "nvim" then [ ''--set NVIM_APPNAME "${configDir}"'' ] else [])
      # and these are our now sorted args
      ++ (FandF_WrapRuntimeDeps lspsAndRuntimeDeps)
      ++ (FandF_envVarSet environmentVariables)
      ++ (FandF_passWrapperArgs extraWrapperArgs)
    );
<
---------------------------------------------------------------------------------
                            *nixCats.flake.nixperts.nvimBuilder.extraPackages*

    # extraPythonPackages and the like require FUNCTIONS that return lists.
    # so we make a function that returns a function that returns lists.
    # this is used for the fields in the wrapper where the default value is (_: [])
    # This just makes a function that calls all the functions we want, 
    # then combines the results into 1 list.
>nix
    combineCatsOfFuncs = sect:
      (x: let
        appliedfunctions = builtins.map (value: (value) x ) (filterAndFlatten sect);
        combinedFuncRes = builtins.concatLists appliedfunctions;
        uniquifiedList = pkgs.lib.unique combinedFuncRes;
      in
      uniquifiedList);
<
---------------------------------------------------------------------------------
                         *nixCats.flake.nixperts.nvimBuilder.generatingNeovim*

    # here is where we add our propagated build dependencies
>nix
    myNeovimUnwrapped = pkgs.neovim-unwrapped.overrideAttrs (prev: {
      propagatedBuildInputs = buildInputs;
    });
    in
    # add all our stuff, and wrap it all up!
    # the following is just the regular pkgs.wrapNeovim
  (import ./wrapNeovim.nix).wrapNeovim pkgs myNeovimUnwrapped {
    inherit extraMakeWrapperArgs;
    inherit (config) vimAlias viAlias withRuby extraName withNodeJs;
    configure = {
      inherit customRC;
      packages.myVimPackage = {
        inherit start;
        inherit opt;
      };
    };

    # the extra packages arguments take (_: []) as a default argument

      /* the function you would have passed to python.withPackages */
    extraPythonPackages = combineCatsOfFuncs extraPythonPackages;
      /* the function you would have passed to python.withPackages */
    withPython3 = config.withPython3;
    extraPython3Packages = combineCatsOfFuncs extraPython3Packages;
      /* the function you would have passed to lua.withPackages */
    extraLuaPackages = combineCatsOfFuncs extraLuaPackages;
  }
<
===========================================================================================================
vim:tw=78:ts=8:ft=help:norl:
