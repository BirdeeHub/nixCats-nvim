---------------------------------------------------------------------------------------
INSTALLATION:                                                   *nixCats.installation_options*

#### Installation:

>bash
  # to test:
  nix shell github:BirdeeHub/nixCats-nvim
  #or
  nix shell github:BirdeeHub/nixCats-nvim#nixCats
  # If using zsh with extra regexing, be sure to escape the #
<

However, you should really just clone or fork the repo.

It is made to be customized into your own portable nix neovim distribution 
with as many options as you wish.

If you use the regularCats package, you only need to edit the flake itself to install new things.

This is useful for faster iteration while editing lua config,
as you then only have to restart it rather than rebuild.

However that also means the regularCats package must be cloned locally.

You should clone regularCats to your ~/.config/ directory and 
make sure the filename is nixCats-nvim, set via configDirName,
so that you can still keep everything in the same place when you do this.

If it is named something else, you will have to change configDirName
in the settings section of flake.nix, or the name of the directory. 
This also affects .local and the like.

These are the basic options you export.
However there are many more ways to do it. This is just a few.

You could run nix build on a flake.nix containing this.
It would produce 4 configured neovim packages.

>nix
  {
      description = "How to import nixCats flake in a flake. Several ways.";
      inputs = {
          nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
          flake-utils.url = "github:numtide/flake-utils";
          nixCats-nvim.url = "github:BirdeeHub/nixCats-nvim";
      };
      outputs = { self, nixpkgs, flake-utils, nixCats-nvim }@inputs: 
      flake-utils.lib.eachDefaultSystem (system: let 
          pkgs = import nixpkgs {
            inherit system;
            overlays = [
              nixCats-nvim.overlays.${system}.nixCats
              nixCats-nvim.overlays.${system}.regularCats
            ];
          };
          # this is the equivalent of the nixCats package
          # but with a different colorscheme
          customVimBuilder = nixCats-nvim.customPackager.${system} packageDefinitions;
          packageDefinitions = {
            customvim = {
              settings = {
                wrapRc = true;
                configDirName = "nixCats-nvim";
                viAlias = false;
                vimAlias = true;
              };
              categories = {
                generalBuildInputs = true;
                markdown = true;
                gitPlugins = true;
                general = true;
                custom = true;
                neonixdev = true;
                test = true;
                debug = false;
                # this does not have an associated category of plugins, 
                # but lua can still check for it
                lspDebugMode = false;
                themer = true;
                # you could also pass something else:
                colorscheme = "catppuccin";
                # you could :lua print(vim.inspect(require('nixCats')))
                # see :help nixCats
              };
            };
          };
      in
          {
              packages.default = nixCats-nvim.packages.${system}.nixCats;
              packages.nixCats = pkgs.nixCats;
              packages.regularCats = pkgs.regularCats;
              packages.customvim = customVimBuilder "customvim";
          }
      );
  }
<

---------------------------------------------------------------------------------------
                                       *nixCats.installation_options.advanced*

This is a showcase of most of the various utils and builders 
that get exported and how to use them.
You could run nix build on a standalone flake.nix file containing only the following.

It would export all the same configurations and exported options as the original 
but with an extra plugin and a new colorscheme.
Although its wrapRc option is not useful since the lua is not locally present.
So it does not export the regularCats package.

>nix
  # Copyright (c) 2023 BirdeeHub
  # Licensed under the MIT license
  {
    description = "A Lua-natic's neovim flake, with extra cats! nixCats!";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
      flake-utils.url = "github:numtide/flake-utils";

      nixCats.url = "github:BirdeeHub/nixCats-nvim";

      # see :help nixCats.flake.inputs

    };

    # see :help nixCats.flake.outputs
    outputs = { self, nixpkgs, flake-utils, nixCats, ... }@inputs:
      # This line makes this package availeable for all systems
      # ("x86_64-linux", "aarch64-linux", "i686-linux", "x86_64-darwin",...)
      flake-utils.lib.eachDefaultSystem (system: let
        utils = nixCats.utils.${system};

        # Here we use mergeOverlayLists to merge otherOverlays from other nixCats flakes
        # feel free to not do that and just include a list of overlays.
        # you may uncomment the import statement to include an overlays directory
        otherOverlays = [ (utils.mergeOverlayLists nixCats.otherOverlays.${system}
        ( /* (import ./overlays inputs) ++ */ 
          [
            # add any flake overlays here.
          ]
        )) ];
        pkgs = import nixpkgs {
          inherit system;
          overlays = otherOverlays ++ [
              # here we can also add the regular inputs from other nixCats like so
              (utils.standardPluginOverlay (nixCats.inputs // inputs))
            ];
          # config.allowUnfree = true;
        };

        # see :help nixCats.flake.outputs.builder
        baseBuilder = nixCats.customBuilders.${system}.fresh;

        # nixCatsBuilder = baseBuilder self pkgs categoryDefinitions packageDefinitions;
        # you could optionally define your own lua like above, but here we import it.
        nixCatsBuilder = nixCats.customBuilders.${system}.keepLua pkgs
          categoryDefinitions packageDefinitions;

        # see :help nixCats.flake.outputs.categories
          # I am using the utils.mergeCatDefs option 
          # to add a new category without redefining the whole set.
          # if you edit an existing category name, your category will overwrite
          # the entire old category with that name.

        categoryDefinitions = utils.mergeCatDefs pkgs 
          nixCats.categoryDefinitions.${system} (name: {

          startupPlugins = {
            eyeliner = with pkgs.vimPlugins; [
              eyeliner-nvim
            ];
          };
          optionalLuaAdditions = ''
            if require('nixCats').eyeliner then
              require'eyeliner'.setup {
                highlight_on_key = true,
                dim = true
              }
            end
          '';
          }
        );

        # see :help nixCats.flake.outputs.packageDefinitions
        packageDefinitions = {
          nixCats = {
            settings = nixCats.packageDefinitions.${system}.nixCats.settings;
            categories = 
              nixCats.packageDefinitions.${system}.nixCats.categories 
              // {
                eyeliner = true;
                colorscheme = "tokyonight";
              };
          };
        };
      in

      # see :help nixCats.flake.outputs.exports
      {

        # this will make a package out of each of the packageDefinitions defined above
        # and set the default package to the one named here.
        # However, this flake only outputs 1 package so its not super needed.
        # its an example, ok?
        packages = utils.mkPackages nixCatsBuilder packageDefinitions "nixCats";

        # this will make an overlay out of each of the packageDefinitions defined above
        # and set the default overlay to the one named here.
        overlays = utils.mkOverlays nixCatsBuilder packageDefinitions "nixCats";

        # choose your package for devShell
        # and add whatever else you want in it.
        devShell = pkgs.mkShell {
          name = "nixCats";
          packages = [ (nixCatsBuilder "nixCats") ];
          inputsFrom = [ ];
          shellHook = ''
          '';
        };

        # To choose settings and categories from the flake that calls this flake.
        # customPackager = baseBuilder self pkgs categoryDefinitions;
        customPackager = nixCats.customBuilders.${system}.keepLua pkgs categoryDefinitions;

        # You may use these to modify some or all of your categoryDefinitions
        customBuilders = {
          fresh = baseBuilder;
          # this has no lua files to include, so instead of
          # keepLua = baseBuilder self;
          # we instead use this to pass on the other lua we inherited
          keepLua = nixCats.customBuilders.${system}.keepLua;
        };
        inherit utils;

        inherit otherOverlays;
        inherit categoryDefinitions;
        inherit packageDefinitions;

      }

    ); # end of flake utils, which returns the value of outputs
  }

<

---------------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
