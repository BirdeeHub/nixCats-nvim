---------------------------------------------------------------------------------------
INSTALLATION:                                                   *nixCats.installation_options*

#### Installation:

>bash
  # to test:
  nix shell github:BirdeeHub/nixCats-nvim
  #or
  nix shell github:BirdeeHub/nixCats-nvim#nixCats
  # If using zsh with extra regexing, be sure to escape the #
<

However, you should really just clone or fork the repo.

It is made to be customized into your own portable nix neovim distribution 
with as many options as you wish.

If you use the regularCats package, you only need to edit the flake itself to install new things.

This is useful for faster iteration while editing lua config,
as you then only have to restart it rather than rebuild.

However that also means the regularCats package must be cloned locally.

You should clone regularCats to your ~/.config/ directory and 
make sure the filename is <nixCats-nvim> so that you 
can still keep everything in the same place when you do this.

If it is named something else, you will have to change configDirName
in the settings section of flake.nix, or the name of the directory. 
This also affects .local and the like.

These are the basic options you export,
using customPackager, packages and overlays:

>nix
  {
      description = "How to import nixCats flake in a flake. Several ways.";
      inputs = {
          nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
          flake-utils.url = "github:numtide/flake-utils";
          nixCats-nvim.url = "github:BirdeeHub/nixCats-nvim";
      };
      outputs = { self, nixpkgs, flake-utils, nixCats-nvim }@inputs: 
      flake-utils.lib.eachDefaultSystem (system: let 
          pkgs = import nixpkgs {
            inherit system;
            overlays = [
              nixCats-nvim.overlays.${system}.nixCats
              nixCats-nvim.overlays.${system}.regularCats
            ];
          };
          # this is the equivalent of the nixCats package
          # but with a different colorscheme
          customVimPackager = nixCats-nvim.customPackager.${system} packageDefinitions;
          packageDefinitions = {
            customvim = {
              settings = {
                wrapRc = true;
                configDirName = "nixCats-nvim";
                viAlias = false;
                vimAlias = true;
              };
              categories = {
                generalBuildInputs = true;
                markdown = true;
                gitPlugins = true;
                general = true;
                custom = true;
                neonixdev = true;
                test = true;
                debug = false;
                # this does not have an associated category of plugins, 
                # but lua can still check for it
                lspDebugMode = false;
                # you could also pass something else:
                colorscheme = "catppuccin";
                # you could :lua print(vim.inspect(require('nixCats')))
                # I got carried away and it worked FIRST TRY.
                # see :help nixCats
              };
            };
          };
      in
          {
              packages.default = nixCats-nvim.packages.${system}.nixCats;
              packages.nixCats = pkgs.nixCats;
              packages.regularCats = pkgs.regularCats;
              packages.customvim = customVimPackager "customvim";
          }
      );
  }
<

---------------------------------------------------------------------------------------
                                       *nixCats.installation_options.advanced*
This is a showcase of the various utils and builders 
that get exported and how to use them.
You could run nixBuild on a flake.nix containing only the following.

>nix
  # Copyright (c) 2023 BirdeeHub
  # Licensed under the MIT license
  {
    description = "A Lua-natic's neovim flake, with extra cats! nixCats!";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
      flake-utils.url = "github:numtide/flake-utils";

      nixCats.url = "github:BirdeeHub/nixCats-nvim";

      # see :help nixCats.flake.inputs

    };

    # see :help nixCats.flake.outputs
    outputs = { self, nixpkgs, flake-utils, nixCats, ... }@inputs:
      # This line makes this package availeable for all systems
      # ("x86_64-linux", "aarch64-linux", "i686-linux", "x86_64-darwin",...)
      flake-utils.lib.eachDefaultSystem (system: let
        utils = nixCats.utils.${system};

        # you may use mergeOverlayLists to merge otherOverlays from other nixCats flakes
        otherOverlays = [ (utils.mergeOverlayLists nixCats.otherOverlays.${system}
        ( /* (import ./overlays inputs) ++ */ # <-- you may uncomment this if desired
          [
            # add any flake overlays here.
          ]
        )) ];
        pkgs = import nixpkgs {
          inherit system;
          overlays = otherOverlays ++ [
              (utils.standardPluginOverlay (nixCats.inputs // inputs))
            ];
          # config.allowUnfree = true;
        };

        # Now that our plugin inputs/overlays and pkgs have been defined,
        # We define a function to facilitate package building for particular categories
        # to do this it imports ./builder/default.nix, passing it our information.
        # This allows us to define categories and settings for 
        # our package later and then choose a package.

        # see :help nixCats.flake.outputs.builder
        baseBuilder = nixCats.customBuilders.${system}.fresh;

        # you could optionally define your own lua, but here we import it.
        # nixCatsBuilder = baseBuilder self pkgs categoryDefinitions packageDefinitions;
        nixCatsBuilder = nixCats.customBuilders.${system}.keepLua pkgs
          categoryDefinitions packageDefinitions;

        # see :help nixCats.flake.outputs.categories
          # I am using the utils.mergeCatDefs option to add a new category
          # if you edit an existing category name, your category will overwrite
          # the entire old category with that name.

        categoryDefinitions = utils.mergeCatDefs pkgs 
          nixCats.categoryDefinitions.${system} (name: {

          startupPlugins = {
            eyeliner = with pkgs.vimPlugins; [
              eyeliner-nvim
            ];
          };
          optionalLuaAdditions = ''
            if require('nixCats').eyeliner then
              require'eyeliner'.setup {
                highlight_on_key = true,
                dim = true
              }
            end
          '';
          }
        );

        # see :help nixCats.flake.outputs.settings
        settings = {
          nixCats = {
            wrapRc = true;
            configDirName = "nixCats-nvim";
            viAlias = false;
            vimAlias = true;
          };
        };

        # see :help nixCats.flake.outputs.packageDefinitions
        packageDefinitions = {
          nixCats = {
            settings = settings.nixCats; 
            categories = {
              generalBuildInputs = true;
              markdown = true;
              gitPlugins = true;
              general = true;
              custom = true;
              neonixdev = true;
              test = true;
              debug = false;
              # this does not have an associated category of plugins, 
              # but lua can still check for it
              lspDebugMode = false;
              # you could also pass something else:
              eyeliner = true;
              colorscheme = "tokyonight";
            };
          };
        };
      in



      # see :help nixCats.flake.outputs.exports
      {

        # this will make a package out of each of the packageDefinitions defined above
        # and set the default package to the one named here.
        packages = utils.mkPackages nixCatsBuilder packageDefinitions "nixCats";

        # this will make an overlay out of each of the packageDefinitions defined above
        # and set the default overlay to the one named here.
        overlays = utils.mkOverlays nixCatsBuilder packageDefinitions "nixCats";

        # choose your package for devShell
        # and add whatever else you want in it.
        devShell = pkgs.mkShell {
          name = "nixCats";
          packages = [ (nixCatsBuilder "nixCats") ];
          inputsFrom = [ ];
          shellHook = ''
          '';
        };

        # To choose settings and categories from the flake that calls this flake.
        # customPackager = baseBuilder self pkgs categoryDefinitions;
        customPackager = nixCats.customBuilders.${system}.keepLua pkgs categoryDefinitions;

        # You may use these to modify some or all of your categoryDefinitions
        customBuilders = {
          fresh = baseBuilder;
          # keepLua = baseBuilder self;
          keepLua = nixCats.customBuilders.${system}.keepLua;
        };

        inherit otherOverlays;
        inherit categoryDefinitions;
        inherit utils;

      }

    ); # end of flake utils, which returns the value of outputs
  }

<

---------------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
