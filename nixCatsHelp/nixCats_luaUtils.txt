=================================================================================
                                                            *nixCats.luaUtils*
---------------------------------------------------------------------------------
                                                      *nixCats.luaUtils.intro*
nixCats has good integration with paq-nvim and other similar Neovim package
managers.

Keep in mind they may not work so well on NixOS,
so when you are on NixOS you should load Neovim via Nix
(not sure if that part needs stating).

To get your Lua utils, run
>bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#luaUtils
<
ALSO keep in mind, if you are not using Nix, you will have to download
all your non-plugin, non-LSP dependencies manually, and this may suck.
Therefore, all this stuff about package managers may be of limited utility.

I have written some Lua utilities to enable this.
There is a template for them, and you can use the flake init -t
variable to import the luaUtils template in the root directory of your config
to add it to your project in the correct place.

-------------------------------------------------------------------------------
                                                      *nixCats.luaUtils.setup*
They are located within the lua/nixCatsUtils directory of the
flake. The main init.lua in it contains a `require("nixCatsUtils").setup`
function, and a `require("nixCatsUtils").isNixCats` variable.

The `require("nixCatsUtils").isNixCats` variable is true if
you installed Neovim via Nix, and otherwise it is false.
This is used to enable package managers only when not loaded via Nix.

You run the `setup` function in your init.lua file at the start, and tell it
what nixCats global command should default to if isNixCats is false.
The default is true.

IF YOU DO NOT DO THIS SETUP CALL:
the result will be that, when you load this folder without using Nix,
the global nixCats function which you use everywhere
to check for categories will throw an error.
This setup function will give it a default value.
Of course, if you only ever download Neovim with Nix, this isn't needed.
But it can't hurt to include anyway.
>lua
  vim.g.mapleader = ' '
  vim.g.maplocalleader = ' '
  -- it doesnt matter if its before or after leader key but
  -- you want this first thing in your init.lua file
  require('nixCatsUtils').setup {
    non_nix_value = true,
  }

  if require('nixCatsUtils').isNixCats then
    print('using nixCats')
  end
<
it also has a few other things that may prove handy
>lua
  ---@overload fun(v: any): any|nil
  ---@overload fun(v: any, o: any): any
  require('nixCatsUtils').lazyAdd(v, o)
  -- If not Nix, return the first thing.
  -- If it is Nix, return the second, or nil if not provided.
  -- used for disabling things like lazy build steps on Nix when needed

  ---@overload fun(v: string|string[]): boolean
  ---@overload fun(v: string|string[], default: boolean): boolean
  require('nixCatsUtils').enableForCategory(v, default)

  -- v will be passed to nixCats function.
  -- If the value fetched by nixCats is nil or false,
  -- return false, otherwise return true.
  -- If not loaded by Nix, return the default value,
  -- or fall back on the nixCats default value provided by
  -- the require("nixCatsUtils").setup function mentioned above.

  ---@param v string|string[]
  ---@param default any
  ---@return any
  require('nixCatsUtils').getCatOrDefault(v, default)
  -- If Nix, return value of nixCats(v) else return default.
  -- Exists to specify a different non_nix_value than the one in setup().
<
---------------------------------------------------------------------------------
                                                       *nixCats.luaUtils.lazy*
For instructions on using the lazy wrapper, check out this template example!

Use the following command in a new directory and check it out!
>bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#kickstart-nvim
<
>lua
  --the wrapper
  ---@overload fun(nixLazyPath: string|nil, lazySpec: any, opts: table)
  ---@overload fun(nixLazyPath: string|nil, opts: table)
  require('nixCatsUtils.lazyCat').setup(nixCats.pawsible({"allPlugins", "start", "lazy.nvim" }), lazySpec, opts)
  -- As long as you call the require('nixCatsUtils').setup function first,
  -- nixCats.pawsible will not throw an error even
  -- if no Nix was used to load your config.
  -- This is covered in the mentioned template.
<
The tutorial:
>nix
    kickstart-nvim = {
      path = ./kickstart-nvim;
      description = ''
        The entirety of kickstart.nvim implemented as a nixCats flake.
        With additional Nix LSPs for editing the Nix part.
        This is to serve as the tutorial for using the nixCats lazy wrapper.
      '';
    };
<
In that template, all notes about the lazy wrapper are in comments that begin
with the string: `NOTE: nixCats:` so to find all of the info, search for that.

One other note.

If you install your grammars via `lazy.nvim` rather than `Nix`,
you will need to add a c compiler to your `lspsAndRuntimeDeps` section
in your `categoryDefinitions`.

If you install your grammars via Nix rather than `lazy.nvim`,
the only methods supported via the `lazy.nvim` wrapper are the following.
>nix
  pkgs.vimPlugins.nvim-treesitter.withAllGrammars
  # or
  pkgs.vimPlugins.nvim-treesitter.withPlugins (plugins: with plugins; [
    nix
    lua
    # etc...
  ]);
  # or
  pkgs.vimPlugins.nvim-treesitter.withPlugins (plugins: pkgs.vimPlugins.nvim-treesitter.allGrammars)
  # or
  builtins.attrValues pkgs.vimPlugins.nvim-treesitter.grammarPlugins
  # or
  pkgs.neovimUtils.grammarToPlugin pkgs.tree-sitter-grammars.somegrammar
<
Summary: as long as `pkgs.neovimUtils.grammarToPlugin` is called on it somehow, it will work.

Any other ways will still work in nixCats if they would work in other schemes,
but not necessarily when using the lazy wrapper,
because the lazy wrapper has to be given their paths from Nix,
and thus need to be sorted from other plugins somehow.

---------------------------------------------------------------------------------
                                                       *nixCats.luaUtils.paq-nvim*
Load the plugins via paq-nvim when not on Nix
YOU are in charge of putting the plugin
urls and build steps in there, which will only be used when not on Nix,
and you should keep any setup functions
OUT of that file, as they are ONLY loaded when this
configuration is NOT loaded via Nix.

The way to think of this is as very similar to the main Nix file for nixCats.

It can be used to download your plugins, and it has an opt for optional plugins.

We will do all our loading and configuring
elsewhere in our configuration, so that
we don't have to write it twice.

All the rest of the setup will be done using the normal setup functions later,
thus working regardless of what method loads the plugins.
only stuff pertaining to downloading and building should be added to paq.
>lua
  require('nixCatsUtils.catPacker').setup({
    { "BirdeeHub/lze", },
    { "BirdeeHub/lzextras", },
    { "stevearc/oil.nvim", },
    { 'joshdick/onedark.vim', },
    { 'nvim-tree/nvim-web-devicons', },
    { 'nvim-lua/plenary.nvim', },
    { 'tpope/vim-repeat', },

    { 'nvim-treesitter/nvim-treesitter-textobjects', opt = true, },
    { 'nvim-treesitter/nvim-treesitter', build = ':TSUpdate', opt = true, },

    { 'nvim-telescope/telescope-fzf-native.nvim', build = ':!which make && make', opt = true, },
    { 'nvim-telescope/telescope-ui-select.nvim', opt = true, },
    {'nvim-telescope/telescope.nvim', opt = true, },

    -- LSP
    { 'williamboman/mason.nvim', opt = true, },
    { 'williamboman/mason-lspconfig.nvim', opt = true, },
    { 'j-hui/fidget.nvim', opt = true, },
    { 'neovim/nvim-lspconfig', opt = true, },

    --  NOTE:  we take care of lazy loading elsewhere in an autocommand
      -- so that we can use the same code on and off Nix.
      -- so here we just tell it not to auto load it
    { 'folke/lazydev.nvim', opt = true, },

    -- completion
    { 'onsails/lspkind.nvim', opt = true, },

    -- NOTE: when lazy loading, you might need to make the name
    -- match the name from Nix, so that you can call
    -- packadd with the same name both on and off Nix.
    { 'L3MON4D3/LuaSnip', opt = true, as = "luasnip", },

    { 'saadparwaiz1/cmp_luasnip', opt = true, },
    { 'hrsh7th/cmp-nvim-lsp', opt = true, },
    { 'hrsh7th/cmp-nvim-lua', opt = true, },
    { 'hrsh7th/cmp-nvim-lsp-signature-help', opt = true, },
    { 'hrsh7th/cmp-path', opt = true, },
    { 'rafamadriz/friendly-snippets', opt = true, },
    { 'hrsh7th/cmp-buffer', opt = true, },
    { 'hrsh7th/cmp-cmdline', opt = true, },
    { 'dmitmel/cmp-cmdline-history', opt = true, },
    { 'hrsh7th/nvim-cmp', opt = true, },

    -- lint and format
    { 'mfussenegger/nvim-lint', opt = true, },
    { 'stevearc/conform.nvim', opt = true, },

    -- dap
    { 'nvim-neotest/nvim-nio', opt = true, },
    { 'rcarriga/nvim-dap-ui', opt = true, },
    { 'theHamsta/nvim-dap-virtual-text', opt = true, },
    { 'jay-babu/mason-nvim-dap.nvim', opt = true, },
    { 'mfussenegger/nvim-dap', opt = true, },

    -- { 'm-demare/hlargs.nvim', },
    { 'mbbill/undotree', opt = true, },
    { 'tpope/vim-fugitive', opt = true, },
    { 'tpope/vim-rhubarb', opt = true, },
    { 'tpope/vim-sleuth', opt = true, },
    { 'folke/which-key.nvim', opt = true, },
    { 'lewis6991/gitsigns.nvim', opt = true, },
    { 'nvim-lualine/lualine.nvim', opt = true, },
    { 'lukas-reineke/indent-blankline.nvim', opt = true, },
    { 'numToStr/Comment.nvim', opt = true, as = "comment.nvim", },
    { 'kylechui/nvim-surround', opt = true, },
    {
      "iamcco/markdown-preview.nvim",
      build = ":call mkdp#util#install()",
      opt = true,
    },


  })
<
  Okay, again, none of the stuff in this file is needed
  if you only load this setup via Nix, but it is an option.
=================================================================================
vim:tw=78:ts=8:ft=help:norl:
