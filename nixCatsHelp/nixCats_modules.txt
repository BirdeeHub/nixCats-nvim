===============================================================================
Nix OS Module                                    *nixCats.module*
                                  *nixCats.module.mkNixosModules*
                                   *nixCats.module.mkHomeModules*

We can create modules based on a configuration
by exporting the following in our flake outputs.

<mkNixosModules> {
    defaultPackageName = "nixCats";
    moduleNamespace = [ "nixCats" ];
    luaPath = "${./.}";
    inherit nixpkgs dependencyOverlays
      categoryDefinitions packageDefinitions extra_pkg_config;
};

<mkHomeModules> {
    defaultPackageName = "nixCats";
    moduleNamespace = [ "nixCats" ];
    luaPath = "${./.}";
    inherit nixpkgs dependencyOverlays
      categoryDefinitions packageDefinitions extra_pkg_config;
};

If moduleNamespace is omitted, it will default to `[ defaultPackageName ]`.

moduleNamespace controls the namespace for the module options.

This means if `moduleNamespace = [ "my_mods" "nixCats" ];`

Then you would `my_mods.nixCats.enable = true;`
and `my_mods.nixCats.packageNames = [ "package" "names" "toinstall" ];`

More specifically, the options will be here:
>nix
  options = with lib; lib.setAttrByPath moduleNamespace ({ /* nixCats options */ });
<

If you do not have a luaPath, you may pass it a keepLua builder.

IMPORTANT
By default, the module inherits pkgs.config from the system's pkgs object,
and its overlays AND the flake's overlays and nixCats config,
as well as the flake's nixpkgs source (by default).
It will inherit things from your system,
but your system will not inherit things from nixCats,
other than the packages themselves in config.${defaultPackageName}.out

-------------------------------------------------------------------------------
Module Options

Home-Manager https://nixcats.org/nixCats_hm_options.html

NixOS and nix-darwin https://nixcats.org/nixCats_nixos_options.html
Same options as home manager but also has the same options defineable per user

-------------------------------------------------------------------------------
Accessing the finished packages for running via nix run

The modules set read only config values containing the resulting packages
built by the module.

They can be grabbed in your flake.nix via the self variable.

Within your config that you grab from your self variable, the packages will be
here:
>nix
  config."<defaultPackageName>".out.packages."<PACKAGE_NAME>"
<
and if using the NixOS module there is ALSO
>nix
  config."<defaultPackageName>".out.users."<USER_NAME>".packages."<PACKAGE_NAME>"
<
Which can be useful! Say, for example, you installed your nvim via a home
manager module. You can then set your EDITOR variable like this!
>nix
  home.sessionVariables.EDITOR = let
    nvimpkg = config."<defaultPackageName>".out.packages."<PACKAGE_NAME>";
  in "${nvimpkg}/bin/${nvimpkg.nixCats_packageName}";
<

When exporting the package from your system's flake.nix,
you will need to get `config` from `self` first.

To find your package from the self variable, it will look something like
this:
>nix
  # getting it from a home manager configuration
  self.homeConfigurations."<home_config_name>".config."<defaultPackageName>".out.packages."<package_name>"

  # getting it from a nixos configuration
  self.nixosConfigurations."<system_config_name>".config."<defaultPackageName>".out.packages."<package_name>"

  # getting home manager package when home manager is a nixos module
  self.nixosConfigurations."<system_config_name>".config.home-manager.users."<username>"."<defaultPackageName>".out.packages."<package_name>"
<

You can then export that from your flake as
`packages.${system}.default` or
`packages.${system}.whatever`

when creating modules with `mkNixosModules` or `mkHomeModules` you can also
set the `moduleNamespace` to whatever you want.
This will also change where you grab the package from.
The read-only config value will be in the same set your other options are declared in.

=================================================================================
vim:tw=78:ts=8:ft=help:norl:
