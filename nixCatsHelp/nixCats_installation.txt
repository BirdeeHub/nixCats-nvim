---------------------------------------------------------------------------------------
INSTALLATION:                                                   *nixCats.installation_options*

Try it out! Run the example config with the following:
>bash
  nix shell 'github:BirdeeHub/nixCats-nvim?dir=templates/example'
  # then launch with
  nixCats
<
Now that you have access to the help and a Nix LSP, to get started,
first exit Neovim. (but not the Nix shell!)

In a terminal, navigate to your nvim directory and
run your choice of the following commands (don't worry! It doesnt overwrite):
>bash
  # Choose one of the following:
  # flake template:
  nix flake init -t github:BirdeeHub/nixCats-nvim
<
The flake template will be easiest to run from anywhere via `nix run`,
and most self explanatory for new users.

nixCats also offers modules to be used with NixOS, Home-Manager, and nix-darwin.

If you wish to export the packages constructed
by the module from your system flake as a package to be
ran via `nix run`, you will need to grab them from the config variable of
your finished system configuration.
Instructions for doing this are at :h |nixCats.module|
>bash
  # home-manager module template:
  nix flake init -t github:BirdeeHub/nixCats-nvim#home-manager
  # nixos/nix-darwin module template:
  nix flake init -t github:BirdeeHub/nixCats-nvim#nixos

  # NOTE: If using zsh with extendedglob AND nomatch turned on,
  # you will need to escape the #
<

And this method, called the nixExpressionFlakeOutputs is somewhere in between.
It is the outputs function of the flake template, but as its own file.
Thus, it is an expression that returns the outputs of the flake. Hence the
name. You call it like a function with your inputs, and recieve all normal flake outputs.

This makes it as easier to export for running via `nix run`,
but is slightly more difficult to install than using the module is for first time users.
>bash
  # the outputs function of the flake template but as its own file
  # callable with import ./the/dir { inherit inputs; }
  # to recieve all normal flake outputs
  nix flake init -t github:BirdeeHub/nixCats-nvim#nixExpressionFlakeOutputs
<
Initializing a template will create a skeleton flake.nix or default.nix for you to fill in.

All the above templates use the same builder function eventually. Either
directly in the flake templates, or behind the scenes in the module one.

So swapping between them is easy if you picked one you dont like for any
reason.

If you are unfamiliar with Neovim and want a ready-made starter config,
you should instead use the following template:
>bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#example
<

If you want the lazy.nvim wrapper and various utilities for functionality without Nix
added at lua/nixCatsUtils also run:
>bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#luaUtils
  # contains things like "is this nix?" "do this if not nix, else do that"
  # needs to be in your config at lua/nixCatsUtils,
  # because if you dont use nix to load neovim,
  # nixCats (obviously) can't provide you with anything from nix!
<
Re-enter the nixCats Neovim version by typing `nixCats .` and take a look!
Reference the `:help nixCats` docs and nixCats-nvim itself as a guide for importing your setup.

You add plugins to the nix file, call whatever lua setup function is required by the plugins,
and use lspconfig to set up LSPs. You may optionally choose to set up a plugin
only when that particular category is enabled in the current package
<
It is a similar process to migrating to a new Neovim plugin manager.

Use a template, and migrate your plugins into the nix file provided.

Then configure in Lua with the configuration options provided by the plugin.

It is suggested to start with the default flake template
or one of the example configurations so that you
can mess around with it in a separate repository/directory,
and easily use nix repl to see what it exports.
Just use `nix repl` in the directory, `:lf .` and type `outputs.` and
autocomplete to see the exported items!
You can use `nix build --show-trace .` to build to a result directory
to test your setup in isolation.
See nix documentation on how to use these commands further at:
[the nix command reference manual]
(https://nixos.org/manual/nix/stable/command-ref/new-cli/nix)

To install that flake in your system flake, you simply add it to your system flake's inputs,
and then grab `inputs.yourflake.packages.${system}.<packagename>`
and place it in your `environment.systemPackages` list (or equivalent)

If you then wish to integrate the directory into your main system flake,
it is suggested to then move to the nixExpressionFlakeOutputs template.

This is because the nixExpressionFlakeOutputs template
is simply the outputs function of the default template.
So it will be most familiar.

However the modules are also great options, and instructions for still
exporting the package from your system flake are at :h |nixCats.module|

Use the help and the example configs in nixCats-nvim as an example.
The help will still be accessible in your version of the editor.

Make sure you run `git add .` before building as anything not staged will not
be added to the store and thus not be findable by either nix or neovim.

---------------------------------------------------------------------------------------
                                                           *nixCats.templates*
You may initialize templates into the current directory via >bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#$TEMPLATE_NAME

The main starter templates have already been mentioned above,
but you may view the full list of templates at
https://nixcats.org/nixCats_templates.html

In particular, the example configurations that demonstrate the lazy.nvim might
be interesting for those who wish to use it!

---------------------------------------------------------------------------------------
How it works in 100 lines:                                  *nixCats.overview*

<tip> For the following 100 lines, it is most effective to cross reference with a template!

First choose a path for `luaPath` as your new Neovim directory to be loaded into
the store.

Then in `categoryDefinitions`:
You have a SET to add LISTS of plugins to the packpath (one for both
pack/*/start and pack/*/opt), a SET to add LISTS of things to add to the path,
a set to add lists of shared libraries,
a set of lists to add... pretty much anything.
Full list of these sets is at :h |nixCats.flake.outputs.categories|.

Those lists are in sets, and thus have names.

You do this in `categoryDefintions`, which is a function provided a pkgs set.
It also recieves the values from `packageDefintions` of the package it is being called with.
It returns those sets of things mentioned above.

`packageDefintions` is a set, containing functions that also are provided a
pkgs set. They return a set of categories you wish to include.
If, from your `categoryDefintions`, you returned:
>nix
  startupPlugins = {
    general = [
      pkgs.vimPlugins.lz-n
      pkgs.vimPlugins.nvim-treesitter.withAllGrammars
      pkgs.vimPlugins.telescope
      # etc ...
    ];
  };
<
In your `packageDefintions`, if you wanted to include it in a package named
myCoolNeovimPackage, launched with either `myCoolNeovimPackage` or `vi`,
you could have:
>nix
    # see :help nixCats.flake.outputs.packageDefinitions
    packageDefinitions = {
      myCoolNeovimPackage = { pkgs, ... }@misc: {
        settings = {
          aliases = [ "vi" ];
        };
        categories = {
          # setting the value to true will include it!
          general = true;
          # yes you can nest them
        };
      };
      # You can return as many packages as you want
    };
    defaultPackageName = "myCoolNeovimPackage";
<
They also return a set of settings, for the full list see :h |nixCats.flake.outputs.settings|.

Then, a package is exported and built based on that using the nixCats builder
function, and various flake exports such as modules based on your config
are made using utility functions provided.
The templates take care of that part for you: just add stuff to lists.

But the cool part. That set of settings and categories is translated verbatim
from a Nix set to a Lua table, and put into a plugin that returns it.
It also passes the full set of plugins included via Nix and their store paths
in the same manner. This gives full transparency to your Neovim of everything
in Nix. Passing extra info is rarely necessary outside of including categories
and setting settings, but it can be useful, and anything other than Nix
functions may be passed. You then have access to the contents of these tables
anywhere in your Neovim, because they are literally a set hardcoded into a
Lua file on your runtimepath.

You may use the `:NixCats` user command to view these
tables for your debugging. There is a global function defined that
makes checking subcategories easier. Simply call `nixCats('the.category')`!
It will return the nearest parent category value, but `nil` if it was a table,
because that would mean a different sub category was enabled, but this one was
not. It is simply a getter function for the table `require('nixCats').cats`
see :h |nixCats| for more info.

That is what enables full transparency of your Nix configuration
to your Neovim! Everything you could have needed to know from Nix
is now easily passed, or already available, through the nixCats plugin!

It has a shorthand for importing plugins that arent on nixpkgs, covered in
:h |nixCats.flake.inputs| and the templates set up the outputs for you.
Info about those outputs is detailed in |nixCats.flake.outputs.exports|.
You can also add overlays accessible to the pkgs object above, and set config
values for it, how to do that is at the top of the templates, and covered in
help at :h |nixCats.flake.outputs| and :h |nixCats.flake.outputs.overlays|.

It also has a template containing some Lua functions that can allow you
to adapt your configuration to work without Nix. For more info see :h
|nixCats.luaUtils| It contains useful functions,
such as "did Nix load Neovim" and "if not Nix do this, else do that"
It also contains a simple wrapper for lazy.nvim that does the rtp reset
properly, and then can be used to tell lazy not
to download stuff in an easy to use fashion.

The goal of the starter templates is so that the usage at the start can be as simple
as adding plugins to lists and calling `require('theplugin').setup()`.
Most further complexity is optional, and very complex things can be achieved
with only minor changes in Nix, and some `nixCats('something')` calls.
You can then import the finished package, and reconfigure it again
without duplication using the override function! see :h |nixCats.overriding|.

---------------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
