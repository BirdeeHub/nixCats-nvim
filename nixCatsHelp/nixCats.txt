=======================================================================================
NIX CATEGORIES                                                       *nixCats*

For help with the nix flake files, see :help `nixCats.flake`

*******************************************************
One IMPORTANT note:
When editing the files within the flake directory,
nix will not package a new file if it isn't staged in git.
run git add before rebuilding it whenever adding a new file.
Using wrapRc = true would mean this also applies to lua files.
In fact, when wrapRc = true, even changes within a lua file
will not be reflected unless you run git add.
*******************************************************

nixCats: returns category names included by nix for this package 

Use this to check if this neovim was packaged with 
a particular category included:
>lua
    local cats = require('nixCats')
    if(cats.nix) then
        -- some stuff here
    end
<
Checking a category that is not present rather than false,
will still return false from this if statement.
I.e. if nix was not a category you included a value true or false for,
it would evaluate as if it was false.

The nixCats "plugin" is just a table. 
It is generated by the flake,
and is the same as the table you provided to choose what 
categories are included in each package in the flake.nix file.
However it also adds wrapRc settings value, 
and the name of the package for convenience.
Because it adds these to nixCats, do not use wrapRc or nixCats_packageName 
as a category name in your package definition (example package definition below).

If in your flake, your package definition looked like this:
  see :help `nixCats.flake.outputs.packaging`
>nix
  nixCats = {
    settings = settings.nixCats;
    categories = {
      bash = true;
      cmp = true;
      telescope = true;
      treesitter = true;
      markdown = true;
      customPlugins = true;
      gitPlugins = true;
      general = true;
      neonixdev = true;
      AI = true;
      java = false;
      kotlin = true;
      # this does not have an associated category of plugins, 
      # but lua can still check for it
      lspDebugMode = false;
      # you could also pass something else:
      theBestCat = "says meow!!!";
      theWorstCat = {
        thing1 = [ "MEOW" "HISSS" ];
        thing2 = [
          {
          thing3 = [ "give" "treat" ];
          }
          "I LOVE KEYBOARDS"
        ];
        thing4 = "couch is for scratching";
      };
      # maybe you need to pass a port or path in or something idk.
      # you could :lua print(require('nixCats').theBestCat)
      # you could :lua print(vim.inspect(require('nixCats').theWorstCat))
      # I honestly dont know what you would need a table like this for,
      # but I got carried away and it worked FIRST TRY.
    };
  };
<
Using:
>vim
    :lua print(vim.inspect(require('nixCats')))
    or
    :NixCats
<
will return something like this:
>lua
  {
    nixCats_packageName = nixCats,
    wrapRc = true,
    AI = true,
    bash = true,
    cmp = true,
    customPlugins = true,
    general = true,
    gitPlugins = true,
    java = false,
    kotlin = true,
    lspDebugMode = false,
    markdown = true,
    neonixdev = true,
    telescope = true,
    theBestCat = "says meow!!!",
    theWorstCat = {
      thing1 = { "MEOW", "HISSS" },
      thing2 = { {
          thing3 = { "give", "treat" }
        }, "I LOVE KEYBOARDS" },
      thing4 = "couch is for scratching"
    },
    treesitter = true
  }
<
Note: it also accepts other things.
lists will become arrays
sets will become tables
null will become nil
also the orders of things can be unpredictable 
so arrays are bad if you care about order of them.
How did treesitter end up last?

everything that isnt true, false, null, 
a list, or a set becomes a lua string.
it uses "[[${builtins.toString value}]]"
in order to achieve this.

If theBestCat says meow, and you use this syntax,
>lua
    local cats = require('nixCats')
    if(cats.theBestCat) then
      print("true")
    end
<
theBestCat will evaluate as true if 
it contains something that isnt false (or nil).
>lua
    local cats = require('nixCats')
    if(cats.theBestCat == true) then
      print("true")
    else
      print("false")
    end
<
However, this one will print false.

Regardless, dependencies included under vocal cats 
will not be included. So don't go changing all true 
values to "meow" it wont work. 

Only categories with the boolean value true are included
from the flake.

Use this fact as you wish.
You could use it to pass information like port numbers or paths
Or whatever else you want.

----------------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
