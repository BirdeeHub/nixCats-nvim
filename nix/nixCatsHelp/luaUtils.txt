=================================================================================
                                                            *nixCats.luaUtils*
---------------------------------------------------------------------------------
                                                      *nixCats.luaUtils.intro*
nixCats has good integration with pckr and other similar neovim package
managers.

Keep in mind they may not work so well on nixos,
so when you are on nixOS you should load neovim via nix
(not sure if that part needs stating)

to get your lua utils run
>bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#luaUtils
<
ALSO keep in mind, if you are not using nix, you will have to download
all your non-plugin, non-lsp dependencies manually, and this may suck.
Therefore, all this stuff about package managers may be of limited utility.

I have written some lua utilities to enable this.
There is a template for them, and you can use the flake init -t
variable to import the luaUtils template in the root directory of your config
to add it to your project in the correct place.

-------------------------------------------------------------------------------
                                                      *nixCats.luaUtils.setup*
They are located within the lua/nixCatsUtils directory of the
flake. The main init.lua in it contains a require("nixCatsUtils").setup
function, and a require("nixCatsUtils").isNixCats variable.

The require("nixCatsUtils").isNixCats variable is true if
you installed neovim via nix, and otherwise it is false.
This is used to enable package managers only when not loaded via nix.

You run the setup function in your init.lua file at the start, and tell it
what nixCats global command should default to if isNixCats is false.
The default is true.

IF YOU DO NOT DO THIS SETUP CALL:
the result will be that, when you load this folder without using nix,
the global nixCats function which you use everywhere
to check for categories will throw an error.
This setup function will give it a default value.
Of course, if you only ever download nvim with nix, this isnt needed.
But it cant hurt to include anyway.
>lua
  vim.g.mapleader = ' '
  vim.g.maplocalleader = ' '
  -- it doesnt matter if its before or after leader key but
  -- you want this first thing in your init.lua file
  require('nixCatsUtils').setup {
    non_nix_value = true,
  }

  if require('nixCatsUtils').isNixCats then
    print('using nixCats')
  end
<
it also has 2 other functions that may prove handy
>lua
  require('nixCatsUtils').lazyAdd(v, o)
  -- if not nix, return the first thing.
  -- If it is nix, return the second, or nil if not provided.
  -- used for disabling things like lazy build steps on nix when needed

  require('nixCatsUtils').enableForCategory(v, default)

  -- v will be passed to nixCats function.
  -- If the value fetched by nixCats is nil or false,
  -- return false, otherwise return true
  -- if not loaded by nix, return the default value,
  -- or fall back on the nixCats default value provided by
  -- the require("nixCatsUtils").setup function mentioned above
<
---------------------------------------------------------------------------------
                                                       *nixCats.luaUtils.lazy*
For instructions on using the lazy wrapper, check out this template example!
Disclaimer, it uses a new lazy option only
in pkgs.lazy-nvim from the unstable branch
So you must either use unstable, or use an overlay to use the lazy wrapper

Use the following command in a new directory and check it out!
>bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#kickstart-nvim
<
Once you understand what is going on to use the lazy wrapper util,
use lazyCat in the lua utils template!

The 3 main utilities at require('nixCatsUtils.lazyCat')
>lua
  --the main wrapper
  require('nixCatsUtils.lazyCat').setup(pluginTable, nixLazyPath, lazySpecs, lazyCFG)
  -- pluginTable is a table of plugin names, either as a list or as the names
  -- of a table of pluginName = "a string";
<
The other 2, which are useful for creating the table of plugin names for the
setup function above:
>lua
  -- to help you merge the start and opt lists in require('nixCats').included
  require('nixCatsUtils.lazyCat').mergePluginTables(table1, table2)
  -- its available if you want it, but it is used in the wrapper on pluginTable
  require('nixCatsUtils.lazyCat').getTableNamesOrListValues(pluginTable)
<
The tutorial:
>nix
    kickstart-nvim = {
      path = ./kickstart-nvim;
      description = ''
        The entirety of the main init.lua file of kickstart.nvim
        implemented as a nixCats flake. With additional nix items for sanity.
        This is to serve as the tutorial for using the nixCats lazy wrapper.
      '';
    };
<
---------------------------------------------------------------------------------
                                                       *nixCats.luaUtils.pckr*
  -- load the plugins via pckr
  -- YOU are in charge of putting the plugin
  -- urls and build steps in there,
  -- and you should keep any setup functions and config
  -- OUT of this table, as pckr is ONLY loaded when this
  -- configuration is NOT loaded via nix.

  -- TL;DR:
  -- ### DONT USE CONFIG VARIABLE ###
  -- unless you are ok with that instruction 
  -- not being ran when used via nix,
  -- this file will not be ran when using nix

  -- Do what you would have done via config variable,
  -- somewhere else checked by category.
>lua
  require('nixCatsUtils.catPacker').setup({
    -- My plugins here from flake.nix, an example for you.
    { 'joshdick/onedark.vim', },
    { 'nvim-tree/nvim-web-devicons', },

    { 'nvim-treesitter/nvim-treesitter', run = ':TSUpdate',
      requires = {
        'nvim-treesitter/nvim-treesitter-textobjects',
      },
    },
    {'nvim-telescope/telescope.nvim',
      requires = {
        'nvim-lua/plenary.nvim',
        { 'nvim-telescope/telescope-fzf-native.nvim', run = 'which make && make', }
      },
    },

    { 'neovim/nvim-lspconfig',
      requires = {
        { 'williamboman/mason.nvim', },
        { 'williamboman/mason-lspconfig.nvim', },
        { 'j-hui/fidget.nvim', },
      },
    },
    --  NOTE:  we take care of lazy loading elsewhere in an autocommand
      -- so that we can use the same code on and off nix.
      -- so here we just tell it not to auto load it
    { 'folke/lazydev.nvim',
      cond = function(_) end,
    },
    { 'hrsh7th/nvim-cmp',
      requires = {
        { 'onsails/lspkind.nvim', },
        { 'L3MON4D3/LuaSnip', },
        { 'saadparwaiz1/cmp_luasnip', },
        { 'hrsh7th/cmp-nvim-lsp', },
        { 'hrsh7th/cmp-nvim-lua', },
        { 'hrsh7th/cmp-nvim-lsp-signature-help', },
        { 'hrsh7th/cmp-path', },
        { 'rafamadriz/friendly-snippets', },
        { 'hrsh7th/cmp-buffer', },
        { 'hrsh7th/cmp-cmdline', },
        { 'dmitmel/cmp-cmdline-history', },
      },
    },

    { 'mfussenegger/nvim-dap',
      requires = {
        { 'rcarriga/nvim-dap-ui', },
        { 'theHamsta/nvim-dap-virtual-text', },
        { 'jay-babu/mason-nvim-dap.nvim', },
      },
    },

    -- { 'm-demare/hlargs.nvim', },
    { 'mbbill/undotree', },
    { 'tpope/vim-fugitive', },
    { 'tpope/vim-rhubarb', },
    { 'tpope/vim-sleuth', },
    { 'folke/which-key.nvim', },
    { 'lewis6991/gitsigns.nvim', },
    { 'nvim-lualine/lualine.nvim', },
    { 'lukas-reineke/indent-blankline.nvim', },
    { 'numToStr/Comment.nvim', },
    { 'kylechui/nvim-surround',
      requires = { 'tpope/vim-repeat', },
    },

    {
      "iamcco/markdown-preview.nvim",
      run = function() vim.fn["mkdp#util#install"]() end,
    },
  })
<
  -- all the rest of the setup will be done using the normal setup functions later,
  -- thus working regardless of what method loads the plugins.
  -- only stuff pertaining to downloading should be added to pckr's table.

=================================================================================
vim:tw=78:ts=8:ft=help:norl:
