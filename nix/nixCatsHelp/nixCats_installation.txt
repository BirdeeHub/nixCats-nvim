---------------------------------------------------------------------------------------
INSTALLATION:                                                   *nixCats.installation_options*

>bash
  nix shell github:BirdeeHub/nixCats-nvim
  # then launch with
  nixCats
<
Now that you have access to the help and a nix lsp, to get started,
first exit neovim. (but not the nix shell!)

In a terminal, navigate to your nvim directory and
run your choice of the following commands (don't worry! It doesnt overwrite):
>bash
  # Choose one of the following:
  # flake template:
  nix flake init -t github:BirdeeHub/nixCats-nvim
  # the outputs function of the flake template but as its own file
  # callable with import ./the/dir { inherit inputs; }
  # to recieve all normal flake outputs
  nix flake init -t github:BirdeeHub/nixCats-nvim#nixExpressionFlakeOutputs

  # for utilities for functionality without nix
  # added at lua/nixCatsUtils also run:
  nix flake init -t github:BirdeeHub/nixCats-nvim#luaUtils
  # contains things like "is this nix?" "do this if not nix, else do that"
  # needs to be in your config at lua/nixCatsUtils,
  # because if you dont use nix to load neovim,
  # nixCats (obviously) can't provide you with anything from nix!

  # If using zsh with extra regexing, be sure to escape the #
<
This will create an empty version of flake.nix (or default.nix) for you to fill in.

It will directly import the utils and thus also the builder and
help from nixCats-nvim itself, keeping your configuration clean.

If you added the luaUtils template, you should also have that at lua/nixCatsUtils

Re-enter the nixCats nvim version by typing nixCats . and take a look!
Reference the `:help nixCats` docs and nixCats-nvim itself as a guide for importing your setup.

You add plugins to the flake.nix, call whatever setup function is required by the plugin,
and use lspconfig to set up lsps. You may optionally choose to set up a plugin
only when that particular category is enabled in the current package
<
It is a similar process to migrating to a new neovim plugin manager.

Use a template, and migrate your plugins into the flake.nix file provided.

Then configure in lua with the configuration options provided by the plugin.

It is suggested to start with the default template so that you can mess around with it in
a separate repository/directory,
and easily use nix repl to see what it exports.
Just use `nix repl` in the directory, `:lf .` and type `outputs.` and
autocomplete to see the exported items!

Then move to the nixExpressionFlakeOutputs template to
integrate it with your main nix config when you are happy with it!

This is because the nixExpressionFlakeOutputs template
is simply the outputs function of the default template. You then move the
inputs to your main system inputs, and retrieve all the normal flake outputs
with yournvim = import ./the/dir/with/template { inherit inputs; };
You can then install them with yournvim.packages.${system}.nvimpackagename,
use the modules they export to modify them further before installing them,
install them via overlay, export them from your system flake so you can still
access them from anywhere via nix run, etc...

Use the help and the example config in nixCats-nvim itself that you just ran as an example.
The help will still be accessible in your version of the editor.

When you have your plugins added, you can build it using nix build and it
will build to a result directory, or nix profile install to install it to your
profile. Make sure you run `git add .` first as anything not staged will not
be added to the store and thus not be findable by either nix or neovim.
See nix documentation on how to use these commands further at:
[the nix command reference manual]
(https://nixos.org/manual/nix/stable/command-ref/new-cli/nix)

When you have a working version, you can begin to explore the many
options made available for importing your new nix neovim configuration
into a nix system or home manager configuration.
There are MANY, thanks to the virtues of the category scheme of this flake.

It is made to be customized into your own portable nix neovim distribution 
with as many options as you wish, while requiring you to leave the normal
nvim configuration scheme as little as possible.

---------------------------------------------------------------------------------------
How it works in 100 lines:                                  *nixCats.overview*

<tip> For the following 100 lines, it is most effective to cross reference with a template!

First choose a path for luaPath as your new neovim directory to be loaded into
the store.

Then in `categoryDefinitions`:
You have a SET to add LISTS of plugins to the packpath (one for both
pack/*/start and pack/*/opt), a SET to add LISTS of things to add to the path,
a set to add lists of shared libraries,
a set of lists to add... pretty much anything.
Full list of these sets is at :h |nixCats.flake.outputs.categories|

Those lists are in sets, and thus have names.

You do this in `categoryDefintions`, which is a function provided a pkgs set.
It also recieves the values from `packageDefintions` of the package it is being called with.
It returns those sets of things mentioned above.

`packageDefintions` is a set, containing functions that also are provided a
pkgs set. They return a set of categories you wish to include.
If, from your `categoryDefintions`, you returned:
>nix
  startupPlugins = {
    general = [
      pkgs.vimPlugins.lz-n
      pkgs.vimPlugins.nvim-treesitter.withAllGrammars
      pkgs.vimPlugins.telescope
      # etc ...
    ];
  };
<
In your `packageDefintions`, if you wanted to include it in a package named
myCoolNeovimPackage, launched with either myCoolNeovimPackage or vi,
you could have:
>nix
    # see :help nixCats.flake.outputs.packageDefinitions
    packageDefinitions = {
      myCoolNeovimPackage = { pkgs, ... }@misc: {
        settings = {
          aliases = [ "vi" ];
        };
        categories = {
          # setting the value to true will include it!
          general = true;
          # yes you can nest them
        };
      };
      # You can return as many packages as you want
    };
    defaultPackageName = "myCoolNeovimPackage";
<
They also return a set of settings, for the full list see :h |nixCats.flake.outputs.settings|

Then, a package is exported and built based on that using the nixCats builder
function, and various flake exports such as modules based on your config
are made using utility functions provided.
The templates take care of that part for you, just add stuff to lists.

But the cool part. That set of settings and categories is translated verbatim
from a nix set to a lua table, and put into a plugin that returns it.
It also passes the full set of plugins included via nix and their store paths
in the same manner. This gives full transparency to your neovim of everything
in nix. Passing extra info is rarely necessary outside of including categories
and setting settings, but it can be useful, and anything other than nix
functions may be passed. You then have access to the contents of these tables
anywhere in your neovim, because they are literally a set hardcoded into a
lua file on your runtimpath.

You may use the `:NixCats` user command to view these
tables for your debugging. There is a global function defined that
makes checking subcategories easier. Simply call `nixCats('the.category')`!
It will return the nearest parent category value, but nil if it was a table,
because that would mean a different sub category was enabled, but this one was
not. It is simply a getter function for the table `require('nixCats').cats`
see :h |nixCats| for more info.

That is what enables full transparency of your nix configuration
to your neovim! Everything you could have needed to know from nix
is now easily passed, or already available, through the nixCats plugin!

It has a shorthand for importing plugins that arent on nixpkgs, covered in
:h |nixCats.flake.inputs| and the templates set up the outputs for you.
Info about those outputs is detailed in |nixCats.flake.outputs.exports|
You can also add overlays accessible to the pkgs object above, and set config
values for it, how to do that is at the top of the templates, and covered in
help at :h |nixCats.flake.outputs| and :h |nixCats.flake.outputs.overlays|

It also has a template containing some lua functions that can allow you
to adapt your configuration to work without nix. For more info see :h
|nixCats.luaUtils| It contains useful functions,
such as "did nix load neovim" and "if not nix do this, else do that"
It also contains a simple wrapper for lazy.nvim that does the rtp reset
properly, and then can be used to tell lazy not
to download stuff in an easy to use fashion.

The goal of the starter templates is so that the usage at the start can be as simple
as adding plugins to lists and calling `require('theplugin').setup()`
Most further complexity is optional, and very complex things can be achieved
with only minor changes in nix, and some `nixCats('something')` calls.
You can then import the finished package, and reconfigure it again
without duplication using the override function! see :h |nixCats.overriding|

---------------------------------------------------------------------------------------
                                                           *nixCats.templates*
The templates may also imported from the utils set
via `inputs.nixCats.utils.templates`
The following is the set where they are defined.

You may initialize them into the current directory via >bash
  nix flake init -t github:BirdeeHub/nixCats-nvim#$TEMPLATE_NAME
>nix
  {
    default = {
      path = ./fresh;
      description = "starting point template for making your neovim flake";
    };
    fresh = {
      path = ./fresh;
      description = "starting point template for making your neovim flake";
    };
    nixExpressionFlakeOutputs = {
      path = ./nixExpressionFlakeOutputs;
      description = ''
        how to import as just the outputs section of the flake, so that you can export
        its outputs with your system outputs

        It is best practice to avoid using the system pkgs and its overlays in this method
        as then you could not output packages for systems not defined in your system flake.
        It creates a new one instead to use, just like the flake template does.

        Call it from your system flake and call it with inputs as arguments.

        In my opinion, this is the best one, but probably not the best one to start with if new to nix.
      '';
    };
    overwrite = {
      path = ./overwrite;
      description = ''
        How to CONFIGURE nixCats FROM SCRATCH,
        given only an existing nixCats package,
        achieved via the OVERRIDE function.

        Equivalent to the default flake template
        or nixExpressionFlakeOutputs except
        for using overrides

        every nixCats package is a full nixCats-nvim
      '';
    };
    module = {
      path = ./module;
      description = ''
        starting point for creating a nixCats module for your system and home-manager
        Inherits config from the source that imported it, best for reconfiguring an existing configuration
      '';
    };
    luaUtils = {
      path = ./luaUtils;
      description = ''
        A template that includes lua utils for using neovim package managers
        when your config file is not loaded via nix.
      '';
    };
    kickstart-nvim = {
      path = ./kickstart-nvim;
      description = ''
        The entirety of kickstart.nvim implemented as a nixCats flake.
        With additional nix lsps for editing the nix part.
        This is to serve as the tutorial for using the nixCats lazy wrapper.
      '';
    };
    overriding = {
      path = ./overriding;
      description = ''
        How to RECONFIGURE nixCats WITHOUT DUPLICATION,
        given only an existing nixCats package,
        achieved via the OVERRIDE function.

        In addition, it is also a demonstration of how to export a nixCats configuration
        as an AppImage.

        It is a 2 for 1 example of 2 SEPARATE things one could do.
      '';
    };
    overlayHub = {
      path = ./overlayHub;
      description = ''
        A template for overlays/default.nix
        :help nixCats.flake.nixperts.overlays
      '';
    };
    overlayFile = {
      path = ./overlayfile;
      description = ''
        A template for an empty overlay file defined as described in
        :help nixCats.flake.nixperts.overlays
      '';
    };
  }
<
---------------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
